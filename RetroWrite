RetroWrite: Statically Instrumenting COTS Binaries for Fuzzing and Sanitization 

当前软件安全分析中存在的问题：
对于开源软件我们已有的许多安全分析方法已经能够较好地解决其安全分析的问题。但是对未开源的软件，或者是依赖于第三方的库等文件，我们很难对其进行有效的安全分析。
当前常用的方法有两种，一种是动态二进制转换加上sanitizer，但其缺陷是开销较高；另一种方法是静态二进制重写技术，但是纯靠静态是不可靠的。不能完全恢复符号信息，难以添加一些安全性检查等等。

因此，本文要做的就是要构成一个能够满足支持真实程序测试、性能良好、具有可扩展性三个需求的框架。
理想的方案就是利用静态重写器智能地进行插桩。创建一个类似于编译后的文件的程序文件集，并带有重定位符号供链接器分析。

Retro write实现原理：
第一步进行预处理，加载一些汇编所需要的二进制文件的文本和数据，加载一些辅助信息例如二进制文件中的符号和重定位，识别和添加直接控制流转移的边缘，构成CFG。
第二步使用上步中的CFG的重定位信息识别数据和代码部分中可符号化常量转变为汇编标签，输出可以重新组装的程序集。
第三步即进行插桩工作。
第四步就是进行一些优化工作，分析插桩、确定需要的寄存器数量等等。
第五步，最后重新组装这些程序集，生成已插桩的二进制文件。

本文实现的是一个用于静态重写二进制文件的可靠的、无启发式的框架。
afl-retrowrite：仅用于二进制应用程序的覆盖插桩，在bug查找能力方面优于afl-gemu和afl-dyninsto，性能相似于基于源代码的模糊测试。
asan-retrowrite：使用retrowrite来测量二进制文件的内存检查，比当前最先进的二进制内存检查更低的开销和更精确的。
